# -*- coding: utf-8 -*-
"""projeto-final-SI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1glpRJIrMCRYB4bVEKZwxxTItVmWc-vuY

# Grupo e nossos objetivos

Nós somos:
- **Cynara Costa**
- **Lucas Gabriel Melo**
- **Icaro Nunes**

E nossos objetivos são:
- Realizar a análise do seguinte dataset: https://www.kaggle.com/datasets/jimschacko/airlines-dataset-to-predict-a-delay
-
"""

# Importações
import pandas as pd
from google.colab import data_table
import numpy
import matplotlib.pyplot as pltpy
import seaborn as sns
import plotly.express as px

# Importando dataset e analisando de forma mais personalizada

columns = "id,Airline,Flight,AirportFrom,AirportTo,DayOfWeek,Time,Lenght,Delay".split(",")
dataset = pd.read_csv("Airlines.csv")
dataset.columns = columns

data_table.DataTable(dataset, include_index=False, num_rows_per_page=10)

# Analisando dados inconsistentes 

dataset.isnull().sum()

"""# Fazendo uma breve descrição do dataset
- Airline =     
- Flight =      
- AirportFrom  =
- AirportTo = 
- DayOfWeek =    
- Time =          
- Lenght =        
- Delay =  
"""

dataset.describe()

X = dataset.drop('Delay', axis = 1)
y = dataset['Delay']
print(X.info())
X.head()

# Colocando tudo para valores e não mais descrições 

from sklearn.preprocessing import LabelEncoder
dataset_encoded = dataset.copy()
Encoder_X = LabelEncoder()
for i in X.columns:
    X[i] = Encoder_X.fit_transform(X[i])
    dataset_encoded[i] = Encoder_X.fit_transform(dataset_encoded[i])
Encoder_y = LabelEncoder()
y = Encoder_y.fit_transform(y)

X.head()

# no delay = 0, delay = 1
y

"""# Análise gráfica dos dados

### Checando a quantidade de delays
"""

pltpy.figure(figsize = (20,20))
pltpy.subplot(3,2,3)
sns.countplot(x = 'Delay', palette=['#636EFA',"#383838"], data = dataset)
pltpy.legend(labels = ['Sem delay', 'Com delay'])

"""### Checando as companhias com maiores e menores delays"""

dt_df = dataset[['Airline','Delay']].groupby('Airline').agg('count').reset_index()
fig = px.bar(dt_df, x='Airline', y='Delay',template = 'plotly_dark')
fig.show()

"""### Checando se o dia da semana influencia no delay"""

dt_df = dataset[['DayOfWeek','Delay']].groupby('DayOfWeek').agg('count').reset_index()
fig = px.bar(dt_df, x='DayOfWeek', y='Delay',template = 'plotly_dark')
fig.show()

"""### Checando os aeroportos de origem e de saída e a influencia dos delays neles"""

dt_df = dataset[['AirportFrom','Delay']].groupby('AirportFrom').agg('count').reset_index()
fig = px.bar(dt_df, x='AirportFrom', y='Delay',template = 'plotly_dark')
fig.show()
dt_df = dataset[['AirportTo','Delay']].groupby('AirportTo').agg('count').reset_index()
fig = px.bar(dt_df, x='AirportTo', y='Delay',template = 'plotly_dark')
fig.show()

"""### Checando se o tamanho no voo tem influencia no delay"""

dt_df = dataset[['Lenght','Delay']].groupby('Lenght').agg('count').reset_index()
fig = px.bar(dt_df, x='Lenght', y='Delay',template = 'plotly_dark')
fig.show()

"""# Treino e teste"""

# nos livrando de variáveis que não utilizaremos
df = dataset.drop('id', 1)

# separando em featured variáveis e target variáveis
X = df.iloc[:, 0:7].values
y = df.iloc[:, 7].values

# transformando variáveis categóricas em contínuas
from sklearn.preprocessing import LabelEncoder
label_encoder_airline = LabelEncoder()
label_encoder_airportfrom = LabelEncoder()
label_encoder_airportto = LabelEncoder()
X[:,0] = label_encoder_airline.fit_transform(X[:,0])
X[:,2] = label_encoder_airportfrom.fit_transform(X[:,2])
X[:,3] = label_encoder_airportto.fit_transform(X[:,3])

# standscaler
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_standard = scaler.fit_transform(X)
X_standard[0]

# minmaxscaler
from sklearn.preprocessing import MinMaxScaler
obj_norm = MinMaxScaler().fit(X)
X_normalization = obj_norm.transform(X)
X_normalization

# Separando o dataset em treinamento e teste
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,
                                                    y,
                                                    test_size=0.30, 
                                                    random_state=0)

X_train.shape, y_train.shape

X_test.shape, y_test.shape

# Criando uma função para avaliar a performance dos modelos

from sklearn.model_selection import cross_val_predict, cross_val_score
from sklearn.metrics import classification_report, accuracy_score

# Diferenciando entre detalhamento de score de treino e de teste

def print_score(classifier,X_train,y_train,X_test,y_test,train=True):
    if train == True:
        print("Training results:\n")
        print('Accuracy Score: {0:.4f}\n'.format(accuracy_score(y_train,classifier.predict(X_train))))
        print('Classification Report:\n{}\n'.format(classification_report(y_train,classifier.predict(X_train))))
        res = cross_val_score(classifier, X_train, y_train, cv=10, n_jobs=-1, scoring='accuracy')
        print('Average Accuracy:\t{0:.4f}\n'.format(res.mean()))
        print('Standard Deviation:\t{0:.4f}'.format(res.std()))
    elif train == False:
        print("Test results:\n")
        print('Accuracy Score: {0:.4f}\n'.format(accuracy_score(y_test,classifier.predict(X_test))))
        print('Classification Report:\n{}\n'.format(classification_report(y_test,classifier.predict(X_test))))

"""KNN

"""

# Fazendo o fit do algoritmo KNN com o dataset de treino

from sklearn.neighbors import KNeighborsClassifier as KNN

classifier = KNN()
classifier.fit(X_train, y_train)

print_score(classifier,X_train,y_train,X_test,y_test,train=True)

"""Naive"""

# Fazendo o fit do algoritmo Naive Bayes com o dataset de treino 

from sklearn.naive_bayes import GaussianNB as NB

classifier = NB()
classifier.fit(X_train,y_train)

print_score(classifier,X_train,y_train,X_test,y_test,train=True)

"""### Terceiro Algoritmo: Decision Tree"""

# Fazendo o fit do algoritmo Decision Tree com o dataset de treino 
from sklearn.tree import DecisionTreeClassifier as dt

classifier = dt(criterion='entropy', random_state = 40)
classifier.fit(X_train, y_train)

print_score(classifier,X_train,y_train,X_test,y_test,train=True)

"""# Conclusão

acuracia e desvio knn

acuracia e desvio naive

acuracia e desvio decision tree
"""