# -*- coding: utf-8 -*-
"""projeto-final-SI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1glpRJIrMCRYB4bVEKZwxxTItVmWc-vuY

# Grupo e nossos objetivos

Nós somos:
- **Cynara Costa**
- **Lucas Gabriel Melo**
- **Icaro Nunes**

E nossos objetivos são:
- Realizar a análise do seguinte dataset: https://www.kaggle.com/datasets/jimschacko/airlines-dataset-to-predict-a-delay
- Treinar modelos de ML para realizar inferências sobre a ocorrência de atraso em voos

## Inicialização
"""

# Importações
import pandas as pd
from google.colab import data_table
import numpy
import matplotlib.pyplot as pltpy
import seaborn as sns
import plotly.express as px

# Importando dataset e analisando de forma mais personalizada

columns = "id,Airline,Flight,AirportFrom,AirportTo,DayOfWeek,Time,Lenght,Delay".split(",")
dataset = pd.read_csv("Airlines.csv")
dataset.columns = columns

data_table.DataTable(dataset, include_index=False, num_rows_per_page=10)

# Analisando dados inconsistentes 

dataset.isnull().sum()

"""# Fazendo uma breve descrição do dataset
- Airline = Companhia aérea
- Flight = Número do voo
- AirportFrom  = Aeroporto de partida
- AirportTo = Aeroporto de destino
- DayOfWeek = Dia da semana
- Time = Tempo de duração
- Lenght = Número de passageiros
- Delay = Ocorrência de atraso
"""

dataset.describe()

X = dataset.drop('Delay', axis = 1)
y = dataset['Delay']
print(X.info())
X.head()

"""## Pré-processamento"""

# Colocando tudo para valores e não mais descrições 

from sklearn.preprocessing import LabelEncoder
dataset_encoded = dataset.copy()
Encoder_X = LabelEncoder()
for i in X.columns:
    X[i] = Encoder_X.fit_transform(X[i])
    dataset_encoded[i] = Encoder_X.fit_transform(dataset_encoded[i])
Encoder_y = LabelEncoder()
y = Encoder_y.fit_transform(y)

X.head()

# no delay = 0, delay = 1
y

"""# Análise gráfica dos dados

### Checando a quantidade de delays
"""

pltpy.figure(figsize = (20,20))
pltpy.subplot(3,2,3)
sns.countplot(x = 'Delay', palette=['#636EFA',"#383838"], data = dataset)
pltpy.legend(labels = ['Sem delay', 'Com delay'])

"""### Checando as companhias com maiores e menores delays"""

dt_df = dataset[['Airline','Delay']].groupby('Airline').agg('count').reset_index()
fig = px.bar(dt_df, x='Airline', y='Delay',template = 'plotly_dark')
fig.show()

"""### Checando se o dia da semana influencia no delay"""

dt_df = dataset[['DayOfWeek','Delay']].groupby('DayOfWeek').agg('count').reset_index()
fig = px.bar(dt_df, x='DayOfWeek', y='Delay',template = 'plotly_dark')
fig.show()

"""### Checando os aeroportos de origem e de saída e a influencia dos delays neles"""

dt_df = dataset[['AirportFrom','Delay']].groupby('AirportFrom').agg('count').reset_index()
fig = px.bar(dt_df, x='AirportFrom', y='Delay',template = 'plotly_dark')
fig.show()
dt_df = dataset[['AirportTo','Delay']].groupby('AirportTo').agg('count').reset_index()
fig = px.bar(dt_df, x='AirportTo', y='Delay',template = 'plotly_dark')
fig.show()

"""### Checando se o tamanho no voo tem influencia no delay"""

dt_df = dataset[['Lenght','Delay']].groupby('Lenght').agg('count').reset_index()
fig = px.bar(dt_df, x='Lenght', y='Delay',template = 'plotly_dark')
fig.show()

"""# Treino e teste"""

# nos livrando de variáveis que não utilizaremos
df = dataset.drop('id', 1)

# separando em featured variáveis e target variáveis
X = df.iloc[:, 0:7].values
y = df.iloc[:, 7].values

# transformando variáveis categóricas em contínuas
from sklearn.preprocessing import LabelEncoder
label_encoder_airline = LabelEncoder()
label_encoder_airportfrom = LabelEncoder()
label_encoder_airportto = LabelEncoder()
X[:,0] = label_encoder_airline.fit_transform(X[:,0])
X[:,2] = label_encoder_airportfrom.fit_transform(X[:,2])
X[:,3] = label_encoder_airportto.fit_transform(X[:,3])

# standscaler
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_standard = scaler.fit_transform(X)
X_standard[0]

# minmaxscaler
from sklearn.preprocessing import MinMaxScaler
obj_norm = MinMaxScaler().fit(X)
X_normalization = obj_norm.transform(X)
X_normalization

# Separando o dataset em treinamento e teste
from sklearn.model_selection import train_test_split

SEED = 20

X_train, X_test, y_train, y_test = train_test_split(X,
                                                    y,
                                                    test_size=0.20, 
                                                    random_state=SEED)

X_train.shape, y_train.shape

X_test.shape, y_test.shape

# Criando uma função para avaliar a performance dos modelos

from sklearn.model_selection import cross_val_predict, cross_val_score
from sklearn.metrics import classification_report, accuracy_score

# Diferenciando entre detalhamento de score de treino e de teste

def print_score(classifier,X_train,y_train,X_test,y_test,train=True):
    if train == True:
        print("Training results:\n")
        print('Accuracy Score: {0:.4f}\n'.format(accuracy_score(y_train,classifier.predict(X_train))))
        print('Classification Report:\n{}\n'.format(classification_report(y_train,classifier.predict(X_train))))
        res = cross_val_score(classifier, X_train, y_train, cv=10, n_jobs=-1, scoring='accuracy')
        print('Average Accuracy:\t{0:.4f}\n'.format(res.mean()))
        print('Standard Deviation:\t{0:.4f}'.format(res.std()))
    elif train == False:
        print("Test results:\n")
        print('Accuracy Score: {0:.4f}\n'.format(accuracy_score(y_test,classifier.predict(X_test))))
        print('Classification Report:\n{}\n'.format(classification_report(y_test,classifier.predict(X_test))))

"""##Primeiro Algoritmo: KNN

"""

from sklearn.neighbors import KNeighborsClassifier as KNN

k_range = tuple(range(1, 30))
k_scores_test = []

for k in k_range:
  knn = KNN(n_neighbors=k, weights="distance")
  knn.fit(X_train, y_train)
  k_scores_test.append(knn.score(X_test, y_test))

k_scores_test

from matplotlib import pyplot as plt

plt.rcParams["figure.autolayout"] = True

fig, ax = plt.subplots(figsize=(10, 8))
ax.set_xlabel("K")
ax.set_ylabel("Accuracy")
ax.set_title("Accuracy score vs K")
ax.plot(k_range, k_scores_test, marker='o', label='training')

for k, t in zip(k_range, k_scores_test):
  if k % 2 != 0:
    plt.text(k, t, k)

import numpy as np

best_values = max(zip(k_range, k_scores_test), key=lambda v:v[-1])

best_k, best_acc_test = best_values

best_k, best_acc_test

best_k

knn = KNN(n_neighbors=best_k, weights="distance")

knn.fit(X_train, y_train)

from sklearn import metrics

y_pred = knn.predict(X_test)

print("Accuracy train: ", knn.score(X_train, y_train))
print("Accuracy predict: ", metrics.accuracy_score(y_test, y_pred))
print("Accuracy test: ", knn.score(X_test, y_test))

print_score(knn, X_train, y_train, X_test, y_test, train=True)

"""##Segundo Algoritmo: Naive Bayes"""

# Fazendo o fit do algoritmo Naive Bayes com o dataset de treino 

from sklearn.naive_bayes import GaussianNB as NB

classifier = NB()
classifier.fit(X_train,y_train)

print_score(classifier,X_train,y_train,X_test,y_test,train=True)

from sklearn.metrics import confusion_matrix
import seaborn as sns

y_pred = classifier.predict(X_test)

labels = [0, 1]

cm = confusion_matrix(y_test, y_pred, labels=labels)

fig = plt.figure()
ax = fig.add_subplot(111)
cax = ax.matshow(cm, cmap='RdPu')
plt.title('Confusion matrix with NB')

fig.colorbar(cax)
ax.set_xticklabels([''] + labels)
ax.set_yticklabels([''] + labels)

plt.xlabel('predict')
plt.ylabel('True')
plt.show()

"""## Terceiro Algoritmo: Decision Tree"""

# Fazendo o fit do algoritmo Decision Tree com o dataset de treino 
from sklearn.tree import DecisionTreeClassifier as dt, plot_tree

classifier = dt(criterion='entropy', random_state = 40)
classifier.fit(X_train, y_train)

plot_tree(classifier)

print_score(classifier,X_train,y_train,X_test,y_test,train=True)